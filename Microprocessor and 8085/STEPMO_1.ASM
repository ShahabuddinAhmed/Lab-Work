;*****************************************
;     MDE-Win8086 EXPERIMENT PROGRAM     *
;     FILENAME  : STEPMO_1.C
;     PROCESSOR : I8086
;
;     -- Function --
;     Keypad 0 : LEFT 45
;     Keypad 1 : RIGHT 45
;     Keypad 2 : LEFT 90
;     Keypad 3 : RIGHT 90
;     Keypad 4 : LEFT 180
;     Keypad 5 : RIGHT 180
;     Keypad 6 : LEFT
;     Keypad 7 : RIGHT
;*****************************************

CODE	SEGMENT
	ASSUME	CS:CODE,DS:CODE,ES:CODE,SS:CODE
	;
	;
KEY	EQU	01H
LCDC	EQU	00H
LCDC_S	EQU	02H
LCDD	EQU	04H
	;
	;
PPIC_C	EQU	1FH
PPIC	EQU	1DH
PPIB	EQU	1BH
PPIA	EQU	19H
	;	
CTC1	EQU	0BH
CTCC	EQU	0FH
	;
INTA	EQU	10H
INTA2	EQU	INTA+2
	;
INT_V	EQU	40H*4
	;
	ORG	1000H
	;
	XOR	BX,BX
	MOV	ES,BX
	MOV	DS,BX
	;
	MOV	AX,OFFSET INT_SER
	MOV	BX,INT_V
	MOV	WORD PTR ES:[BX],AX
	;
	XOR	AX,AX
	MOV	WORD PTR ES:[BX+2],AX
	;
	CALL	INIT
	CALL	P_INIT
	;
	MOV	AL,10000000B
	OUT	PPIC_C,AL
	;
	MOV	AL,11111111B
	OUT	PPIA,AL
	MOV	AL,00000000B
	OUT	PPIC,AL	
	;
	CALL	ALLCLR
	;
	;
	MOV	SI,OFFSET DATA
	CALL	STRING
	;
	CALL	LN21
	MOV	SI,OFFSET DATA1
	CALL	STRING
	; CLEAR
	MOV	BX,0
	MOV	WORD PTR SPD_BUF,BX
	MOV	BYTE PTR P_CONT,BL
	MOV	BYTE PTR FULS_STR,BL
	;
MAIN:
	STI
	CALL	SCAN
	MOV	AH,BYTE PTR K_BUF
	AND	AH,00011111B	
	; '0' key?
	CMP	AH,0
	JNE	MAIN1
	JMP	L_45
	; '1' key?
MAIN1:	CMP	AH,1
	JNE	MAIN2
	JMP	R_45
	; '2' key?
MAIN2:	CMP	AH,2
	JNE	MAIN3
	JMP	L_90
	; '3' key?
MAIN3:	CMP	AH,3
	JNE	MAIN4
	JMP	R_90
	; '4' key?
MAIN4:	CMP	AH,4
	JNE	MAIN5
	JMP	L_180
	; '5' key?
MAIN5:	CMP	AH,5
	JNE	MAIN6
	JMP	R_180
	; '6' key?
MAIN6:	CMP	AH,6
	JNE     MAIN7
	JMP	L_REV
	; '7' key?
MAIN7:	CMP	AH,7
	JNE     MAIN
	JMP	R_REV
	;
	;
R_45:   CLI
	MOV	AL,25
	MOV	BYTE PTR P_CONT,AL
	XOR	AL,AL
	MOV	BYTE PTR LR_FLAG,AL
	;
	CALL	LN21
	MOV	SI,OFFSET R_45D
	CALL	STRING
	STI
	JMP	MAIN
	;
R_45D:	DB	'Right 45 degree!',00H
	;
R_90:   CLI
	MOV	AL,50
	MOV	BYTE PTR P_CONT,AL
	XOR	AL,AL
	MOV	BYTE PTR LR_FLAG,AL
	;
	CALL	LN21
	MOV	SI,OFFSET R_90D
	CALL	STRING
	STI
	JMP	MAIN
	;
R_90D:	DB	'Right 90 degree!',00H
	;
R_180:  CLI
	MOV	AL,100
	MOV	BYTE PTR P_CONT,AL
	XOR	AL,AL
	MOV	BYTE PTR LR_FLAG,AL
	;
	CALL	LN21
	MOV	SI,OFFSET R_180D
	CALL	STRING
	STI
	JMP	MAIN
	;
R_180D:	DB	'Right 180 degree',00H

R_REV:  CLI
	MOV	AL,0FFH
	MOV	BYTE PTR P_CONT,AL
	XOR	AL,AL
	MOV	BYTE PTR LR_FLAG,AL
	;
	CALL	LN21
	;
	MOV	SI,OFFSET R_MSG
	CALL	STRING
	STI
	JMP	MAIN
	;
R_MSG:	DB	'Right Revolution',00H	
	;
	;
L_45:   CLI
	MOV	AL,25
	MOV	BYTE PTR P_CONT,AL
	MOV	AL,1
	MOV	BYTE PTR LR_FLAG,AL
	;
	CALL	LN21
	MOV	SI,OFFSET L_45D
	CALL	STRING
	STI
	JMP	MAIN
	;
L_45D:	DB	'Left 45 degree !',00H
	;
L_90:   CLI
	MOV	AL,50
	MOV	BYTE PTR P_CONT,AL
	MOV	AL,1
	MOV	BYTE PTR LR_FLAG,AL
	;
	CALL	LN21
	MOV	SI,OFFSET L_90D
	CALL	STRING
	STI
	JMP	MAIN
	;
L_90D:	DB	'Left 90 degree !',00H
	;
L_180:  CLI
	MOV	AL,100
	MOV	BYTE PTR P_CONT,AL
	MOV	AL,1
	MOV	BYTE PTR LR_FLAG,AL
	;
	CALL	LN21
	MOV	SI,OFFSET L_180D
	CALL	STRING
	STI
	JMP	MAIN
	;
L_180D:	DB	'Left 180 degree!',00H
	;	
L_REV:   CLI
	MOV	AL,0FFH
	MOV	BYTE PTR P_CONT,AL
	MOV	AL,1
	MOV	BYTE PTR LR_FLAG,AL
	;
	CALL	LN21
	;
	MOV	SI,OFFSET L_MSG
	CALL	STRING
	STI
	JMP	MAIN
	;
L_MSG:	DB	'Left Revolution',00H	
	;
DATA	DB	'Stepping Control',00H
DATA1:	DB	'Press 0 - 7 Key ',00H
	;

INT_SER: MOV	SI,OFFSET P_CONT
	MOV	AH,BYTE PTR CS:[SI]
	OR	AH,AH
	JZ	OUT_INT
	;
	CMP	AH,0FFH
	JE	CHK_RL
	DEC	BYTE PTR CS:[SI]
	;
CHK_RL: MOV	AL,BYTE PTR LR_FLAG
	CMP	AL,1
	JE	LEFT
	;
	MOV	DI,OFFSET FULS_STR
	MOV	AL,BYTE PTR CS:[DI]
	CMP	AL,4
	JNE	STEP0
	XOR	AL,AL
	MOV	BYTE PTR CS:[DI],AL
	;
STEP0:	INC	BYTE PTR CS:[DI]		
	JMP	OUT_PULSE
	;
LEFT:	MOV	DI,OFFSET FULS_STR
	MOV	AL,BYTE PTR CS:[DI]
	CMP	AL,-1
	JNE	STEP1
	MOV	AL,4
	MOV	BYTE PTR CS:[DI],AL
	;
STEP1:	DEC	BYTE PTR CS:[DI]
	;
OUT_PULSE:
	MOV	SI,OFFSET PULSE_TBL
	AND	AX,00FFH
	ADD	SI,AX
	;
	MOV	AL,BYTE PTR CS:[SI]
	OUT	PPIB,AL
	;
OUT_INT:
	MOV	AX,WORD PTR SPD_BUF
	OUT	CTC1,AL
	MOV	AL,AH
	OUT	CTC1,AL
	; EOI command
	MOV	AL,00100000B
	OUT	INTA,AL
	STI
	IRET	
	;
PULSE_TBL:
	DB	01100110B
	DB	00110011B
	DB	10011001B
	DB	11001100B
	;	
P_INIT  PROC	NEAR
	PUSH	AX
	MOV	AL,01110000B
	OUT	CTCC,AL
	;
P_INIT1: MOV	AX,WORD PTR SPD_BUF
	OUT	CTC1,AL
	MOV	AL,AH
	OUT	CTC1,AL
	POP	AX
	RET	
P_INIT	ENDP
	;
INIT	PROC	NEAR
	; ICW1
 	MOV	AL,00010011B
	OUT	INTA,AL
	;ICW2 interrupt vector
	MOV	AL,40H
	OUT	INTA2,AL
	;ICW4
	MOV	AL,00000001B
	OUT	INTA2,AL
	;interrupt mask
	MOV 	AL,11111110B
	OUT	INTA2,AL
	RET
INIT	ENDP
	;
	; LCD instruction
ALLCLR:	MOV	AH,01H
	JMP	LNXX
	;
LN21:   MOV	AH,0C0H
	;
LNXX:	CALL	BUSY
	MOV	AL,AH
	OUT	LCDC,AL
	RET
	; busy flag check
BUSY:	IN	AL,LCDC_S
	AND	AL,10000000B
	JNZ	BUSY
	RET
	;
	; 1 char. LCD OUT 
	; AH = out data
CHAROUT:
	CALL	BUSY
	;
	MOV	AL,AH
	OUT	LCDD,AL
	RET
	;
STRING:	MOV	AH,BYTE PTR CS:[SI]
	CMP	AH,00H
	JE	STRING1
	; out
	CALL	BUSY
	CALL	CHAROUT
	INC	SI
	JMP	STRING
STRING1:
  	RET
	;		
	; key board scan, key code = AL
SCAN    PROC	NEAR
	IN	AL,KEY
	TEST	AL,10000000B
	JNZ	SCAN
	;
	AND	AL,00011111B
	MOV	BYTE PTR K_BUF,AL
	; key clear
	OUT	KEY,AL
	RET
SCAN	ENDP	
	;
K_BUF:	DB	1
P_CONT:	DB	1
FULS_STR: DB 	1
LR_FLAG: DB	1
SPD_BUF: DW	0000H	
	;
CODE	ENDS
	END



